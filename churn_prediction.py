# -*- coding: utf-8 -*-
"""Churn Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VPOIKatkwXRiutKCGhMI2m0sMeCHyp9u
"""

# importing the libraries

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split

# Deep learning libraries

import tensorflow
from tensorflow.keras.layers import Dense
from tensorflow.keras.models import Sequential

# to see the version of tensorflow

tensorflow.__version__

# load the data

data = pd.read_csv("/content/Churn_Modelling.csv")

data

X = data.iloc[::, 3:13]
y = data.iloc[:: , 13]

X

y

# checking the data information

data.info()

geography = pd.get_dummies(X["Geography"] , drop_first=True)

gender = pd.get_dummies(X["Gender"] , drop_first=True)

X

# droping the duplicate columns
X.drop(columns=["Geography" , "Gender"] , inplace=True)

X

# concatinating the new columns
X = pd.concat([X , geography , gender] ,axis= 1)

X

X.info()

geography

# splitting the data in traing and testing data


X_train , X_test , y_train , y_test = train_test_split( X , y , test_size = 0.2 , random_state = 101)

# model building - Done

# compile --- Done

# train

# model building

model = Sequential()

# hidden layer 1
model.add(Dense(120))

# hidden layer 2
model.add(Dense(140))


# hidden layer 3

model.add(Dense(100))

# hidden layer 4

model.add(Dense(130))


# output layer
model.add(Dense(2))

model.compile(loss= "binary_crossentropy",metrics = ['Accuracy'])

model.fit(X_train , y_train)

# y = mx + c

# model building

model = Sequential()

# hidden layer 1
model.add(Dense(120 , activation= "relu"))

# hidden layer 2
model.add(Dense(140, activation= "relu"))


# hidden layer 3

model.add(Dense(100, activation= "relu"))

# hidden layer 4

model.add(Dense(130, activation= "relu"))

# output layer
model.add(Dense(2))

model.compile(loss= "binary_crossentropy",metrics = ['Accuracy'])

model.fit(X_train , y_train)

# model building

model = Sequential()

# hidden layer 1
model.add(Dense(120 , activation= "relu"))

# hidden layer 2
model.add(Dense(140, activation= "sigmoid"))


# hidden layer 3

model.add(Dense(100, activation= "relu"))

# hidden layer 4

model.add(Dense(130, activation= "sigmoid"))

# output layer
model.add(Dense(2))

model.compile(optimizer="adam",loss= "binary_crossentropy",metrics = ['Accuracy'])

model.fit(X_train , y_train ,epochs = 10 ,  batch_size=32  )

# Thing that are in our control
# epochs
# batch_size
# activation
# optimizer
# no of neurons
# dropout
# weight_initialization

# optimization

# model building

model = Sequential()

# hidden layer 1
model.add(Dense(120 , activation= "relu"))

# hidden layer 2
model.add(Dense(140, activation= "sigmoid"))


# hidden layer 3

model.add(Dense(100, activation= "relu"))

# hidden layer 4

model.add(Dense(130, activation= "sigmoid"))

# output layer
model.add(Dense(2))

model.compile(loss= "binary_crossentropy",metrics = ['Accuracy'])

model.fit(X_train , y_train ,epochs = 10 ,  batch_size=32  )

# Different Weight initializers

# model building

model = Sequential()

# hidden layer 1
model.add(Dense(120 , activation= "relu" , kernel_initializer='he_uniform'))   # for relu he_uniform

# hidden layer 2
model.add(Dense(140, activation= "sigmoid" , kernel_initializer='glorot_uniform')) # golorot_uniform


# hidden layer 3

model.add(Dense(100, activation= "relu" , kernel_initializer='glorot_uniform'))

# hidden layer 4

model.add(Dense(130, activation= "sigmoid"))

# output layer
model.add(Dense(2))

model.compile(optimizer="adam",loss= "binary_crossentropy",metrics = ['Accuracy'])

model.fit(X_train , y_train ,epochs = 100 ,  batch_size=32  )

# Dropout


# we add dropout layes to only hiddden layer

# and we genrally go till 0.5

# importing the libraries

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split

# Deep learning libraries

import tensorflow
from tensorflow.keras.layers import Dense, Dropout
from tensorflow.keras.models import Sequential

# Different Weight initializers

# model building

model = Sequential()

# hidden layer 1
model.add(Dense(120 , activation= "relu" , kernel_initializer='he_uniform'))   # for relu he_uniform
model.add(Dropout(0.3))
# hidden layer 2
model.add(Dense(140, activation= "sigmoid" , kernel_initializer='glorot_uniform')) # golorot_uniform
model.add(Dropout(0.2))

# hidden layer 3

model.add(Dense(100, activation= "relu" , kernel_initializer='glorot_uniform'))
model.add(Dropout(0.2))
# hidden layer 4

model.add(Dense(130, activation= "sigmoid"))
model.add(Dropout(0.1))
# output layer
model.add(Dense(2))

model.compile(optimizer="adam",loss= "binary_crossentropy",metrics = ['Accuracy'])

model.fit(X_train , y_train ,epochs = 100 ,  batch_size=32 , validation_data=[X_test , y_test]  )

